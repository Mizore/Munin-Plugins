#!/usr/bin/perl -w
#
# Plugin to monitor the the current firewall environment
#
# Magic markers (optional - only used by munin-config and some
# installation scripts):
#%# family=auto
#%# capabilities=autoconf
use strict;
use Socket;
use File::stat;
use Time::localtime;
use Time::Local;


sub SortByIp
{
  my @decimalsA = split(/\./,$$a[0]);
  my @decimalsB = split(/\./,$$b[0]);
  my $compare = 0; 
  for(my $pos = 0; $pos < @decimalsA; $pos++)
  {
    if($decimalsA[$pos] ne $decimalsB[$pos])
    {
      $compare = $decimalsA[$pos] <=> $decimalsB[$pos];
      last;
    }
  }
  return $compare;
}
my $bandwidthFilePath = "/tmp/bandwidth.tmp";
if (!-e $bandwidthFilePath)
{
  system("touch",$bandwidthFilePath);
  exit;
}
    

my $secondsElapsed = time - stat($bandwidthFilePath)->mtime;
if($secondsElapsed == 0)
{
  exit;
}
my $pmacctd = "/usr/sbin/pmacct";

my $input_pipe = "/tmp/pmacct_host_in.pipe";
my $output_pipe = "/tmp/pmacct_host_out.pipe";

sub ExtractBandwidth
{
  my($config) = @_;

  my @bandwidth = ();
  open (my $query_controlerList, $pmacctd." -s -p ".$output_pipe."|") or die "Could not open firewall statistic output, $!";
  while(<$query_controlerList>)
  {
    if ($_ =~ m/^192.168.\d{1,3}.\d{1,3}/)
    {
      my @values=split(' ',$_);
      my $ip_address = $values[0];
      my $upStream = int($values[2]*8/$secondsElapsed);
	
      my $pos = @bandwidth;
      $bandwidth[$pos] = [$ip_address, $upStream, 0];
    }
  }
      
  open ($query_controlerList, $pmacctd." -s -p ".$input_pipe."|") or die "Could not open firewall statistic output, $!";
  while(<$query_controlerList>)                                                                                          
  {                                                                                                                      
    if ($_ =~ m/^192.168.\d{1,3}.\d{1,3}/)                                                                               
    {                                                                                                                      
      my @values=split(' ',$_);                                                                                        
      my $ip_address = $values[0];                                                                                     
      my $downStream = int($values[2]*8/$secondsElapsed);
        
      my $pos;
      for($pos = 0; $pos < @bandwidth; $pos++)
      {
        if($bandwidth[$pos][0] eq $ip_address)
        {
          last;
        }
      }
      if ( $pos ==  @bandwidth)
      {                                       
        $bandwidth[$pos][0] = $ip_address;
        $bandwidth[$pos][1] = 0;
      }
      $bandwidth[$pos][2] = $downStream;
    }                                                                                                                  
  }

  my @bandwidthCountersOld = ();
   
  my $bandwidthFile;
  open ($bandwidthFile ,$bandwidthFilePath) or die "Could not open bandwidth-file";
  while(<$bandwidthFile>)
  {
    if ($_ =~ m/192.168.\d{1,3}.\d{1,3}/)
    {
      my $ip_address = $_;
      chomp($ip_address);
      
      my $match = 0;
      foreach (@bandwidth)
      {
        if($$_[0] eq $ip_address)
        {
          $match = 1;
          last;
        }
      }
    
      if ($match == 0)
      {
        my $pos = @bandwidth;
        $bandwidth[$pos] = [$ip_address, 0, 0] 
      }
    }
  }
  
  @bandwidth = sort{SortByIp}@bandwidth;
  
  if ($config)
  {
    print "graph_title Bandwidth Usage\n";                                                                                   
    print "graph_args --base 1024\n";                                                                                        
    print "graph_vlabel in (-) / out (+) per \$\{graph_period\}\n";                                                          
    print "graph_category network\n";                                                                                        
    print "graph_order \n";
  
    foreach(@bandwidth)
    {
      my $ip_address = $$_[0];                                                                                     
      my @numbers=split('\.', $ip_address);                                                                                     
      my $id = $numbers[2]."_".$numbers[3];                                                                                     
      #my $name = gethostbyaddr(inet_aton($ip_address), AF_INET) or $ip_address;                                                 
      my $name;     
      $name = gethostbyaddr(inet_aton($ip_address), AF_INET);
      
      if ( defined $name)                                                                                                       
      {                                                                                                                         
             my @nameParts = split('\.',$name);                                                                                 
             $name = $nameParts[0];                                                                                             
      }                                                                                                                         
      else                                                                                                                      
      {                                                                                                                         
             $name = $ip_address;                                                                                               
      }                                                                                                                         
      
      printf "graph_".$id."_down.label ".$id." received\n";                                                                     
      printf "graph_".$id."_down.type GAUGE\n";                                                                                 
      printf "graph_".$id."_down.graph no\n";                                                                                   
                                                                                                                                
      printf "graph_".$id."_up.type GAUGE\n";                                                                                   
      printf "graph_".$id."_up.label ".$name."\n";                                                                              
      printf "graph_".$id."_up.negative graph_".$id."_down\n"; 
    }
  }
  else
  {
    my $bandwidthFile;
    
    open ($bandwidthFile ,">".$bandwidthFilePath) or die "Could not open bandwidth-file";
    foreach(@bandwidth)
    {
      my $ip_address = $$_[0];
      my $downStream = $$_[1];
      my $upStream = $$_[2];

      print $bandwidthFile $ip_address."\n";

      my @numbers=split('\.',$ip_address);
      my $id = $numbers[2]."_".$numbers[3];
      
      printf "graph_".$id."_down.value ".$downStream."\n";
      printf "graph_".$id."_up.value ".$upStream."\n";
    }
    system($pmacctd." -e -p ".$output_pipe." >/dev/null");
    system($pmacctd." -e -p ".$input_pipe." >/dev/null");
  }
}

if(not defined ($ARGV[0]))
{
  $ARGV[0] = ""; 
  
}

if($ARGV[0] eq "config")
{
      ExtractBandwidth(1);
}
else
{
      ExtractBandwidth(0);
}
