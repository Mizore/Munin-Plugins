#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright (C) 2010  Raptor 2101 [raptor2101@gmx.de]
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>. 
#
# A plugin to show statistic about Logging-Behaviour through mysql-querys.
# It needs a mysql db as syslog backend.
# usage:
# syslog
# syslog_process
# syslog_priority
# Magic markers
#%# capabilities=autoconf suggest
#%# family=auto
from warnings import filterwarnings
from datetime import datetime;
from datetime import timedelta;
import MySQLdb,sys,os;
filterwarnings('ignore', category = MySQLdb .Warning);

def mergePid(org_rows):
  return_rows = [];
  lastProcess = None;
  lastRow = None;
  for row in org_rows:
    process = row[1].lower();
    index = process.find("[");
    if(index>-1):
      process = process[:index];
    index = process.find("/");
    if(index>-1):
      process = process[:index];
    process = process.replace(":","");
    if(process != lastProcess):
      newRow = [row[0],process, row[2]];
      return_rows.append(newRow);
      lastProcess = process;
      lastRow = newRow;
    else:
      lastRow[2] += row[2];
  return return_rows;
  
def mapPriorities(org_rows):
  return_rows = [];
  for row in org_rows:
    if row[1] == 0:
      priority = "EMERGENCY";
    elif row[1] == 1:
      priority = "ALERT";
    elif row[1] == 2:
      priority = "CRITICAL";
    elif row[1] == 3:
      priority = "ERROR";
    elif row[1] == 4:
      priority = "WARN";
    elif row[1] == 5:
      priority = "NOTICE";
    elif row[1] == 6:
      priority = "INFO";
    else:
      priority = "DEBUG";
    newRow = [row[0], priority, row[2]];
    return_rows.append(newRow);
  return return_rows;
  
def createMemoryTable(cursor, target_column):
  cursor.execute("CREATE TABLE IF NOT EXISTS aggregate_lockup_%s \
          (\
            FromHost varchar(60),\
            Target varchar(60),\
            Value int,\
            LastEdit datetime, \
            INDEX USING BTREE (FromHost,Target)\
          ) ENGINE = MEMORY;"%target_column);

def resetAllValues(cursor, target_column):
  cursor.execute("UPDATE aggregate_lockup_%s SET Value = 0"%target_column);
  

def calculateValues(cursor, target_column):
  createMemoryTable(cursor, target_column);
  now = datetime.now();
  
  cursor.execute("SELECT LastEdit FROM aggregate_lockup_%s ORDER BY LastEdit DESC LIMIT 1,1;"%(target_column));
  if (cursor.rowcount > 0):
    result = cursor.fetchone();
    timestamp = result[0];
    delta = now-timestamp;
    if(delta.seconds < 300):
      return;
  resetAllValues(cursor, target_column);  
  timestamp = now - timedelta(days=365)
  
  cursor.execute("DELETE FROM aggregate_lockup_%s WHERE  LastEdit < '%s'"%(target_column,timestamp.isoformat()));
  
  timestamp = now - timedelta(minutes=5)
  if(target_column == "FromHost"):
    cursor.execute("SELECT FromHost, FromHost, COUNT(*)  FROM SystemEvents WHERE ReceivedAt > '%s' GROUP BY FromHost;"%(timestamp.isoformat()));
  else:
    cursor.execute("SELECT FromHost, %s, COUNT(*)  FROM SystemEvents WHERE ReceivedAt > '%s' GROUP BY FromHost, %s;"%(target_column,timestamp.isoformat(), target_column));

  rows = cursor.fetchall();

  if(target_column == "SysLogTag"):
    rows = mergePid(rows);
  elif target_column == "Priority":  
    rows = mapPriorities(rows);
  for row in rows:
    cursor.execute("UPDATE aggregate_lockup_%s SET Value = %s, LastEdit='%s' WHERE FromHost = '%s' AND Target='%s';"%(target_column, row[2], now.isoformat() ,row[0], row[1]));
    if (cursor.rowcount == 0):
      cursor.execute("INSERT INTO aggregate_lockup_%s VALUES ('%s', '%s', %s, '%s');"%(target_column,row[0], row[1], row[2], now.isoformat()));
    
plugin_name=list(os.path.split(sys.argv[0]))[1];
splittet_name = plugin_name.split("_");
target=splittet_name[1];

if(target=="process"):
  target_column = "SysLogTag";
elif(target=="priority"):
  target_column = "Priority";
else:  
  target_column = "FromHost";
  
mysql = MySQLdb.connect("localhost", os.getenv('dbuser',''), os.getenv('dbpasswd',''), "Syslog");
cursor = mysql.cursor()
calculateValues(cursor, target_column);

if len(sys.argv)>1 and sys.argv[1]=="config":
  if target_column != "FromHost":
    print("multigraph syslog_%s"%target)
  print("graph_title LogEvents per %s"%target)
  print("graph_vlabel LogEvent Count")
  print("graph_category Logging")

  
  cursor.execute("SELECT Target, SUM(VALUE) as Value FROM aggregate_lockup_%s GROUP BY Target ORDER BY VALUE DESC LIMIT 0,20;"%target_column);
  rows = cursor.fetchall();
  for row in rows:
    value = row[0];
    print("%s.label %s"%(value,value))
    print("%s.draw LINE2"%value)
  
  if target_column != "FromHost":
    cursor.execute("SELECT DISTINCT FromHost FROM aggregate_lockup_%s"%target_column);
    rows = cursor.fetchall();
    for row in rows:
      host = row[0];
      print("multigraph syslog_%s.%s"%(target,host))
      print("graph_title LogEvents per %s for %s"%(target,host))
      print("graph_vlabel LogEvent Count")
      print("graph_category Logging")
      cursor.execute("SELECT Target FROM aggregate_lockup_%s WHERE FromHost = '%s' ORDER BY VALUE DESC LIMIT 0,20"%(target_column, host));
      targets = cursor.fetchall();
      for subTarget in targets:
        value = subTarget[0];
        print("%s.label %s"%(value,value))
        print("%s.draw LINE2"%value)
else:
  if target_column != "FromHost":
    print("multigraph syslog_%s"%target)
  cursor.execute("SELECT Target, SUM(VALUE) as Value FROM aggregate_lockup_%s GROUP BY Target ORDER BY VALUE DESC LIMIT 0,20;"%target_column);
  rows = cursor.fetchall();
  for row in rows:
    print("%s.value %s"%(row[0],row[1]))
  
  if target_column != "FromHost":
    cursor.execute("SELECT DISTINCT FromHost FROM aggregate_lockup_%s"%target_column);
    rows = cursor.fetchall();
    for row in rows:
      host = row[0];
      print("multigraph syslog_%s.%s"%(target,host))
      cursor.execute("SELECT Target,Value FROM aggregate_lockup_%s WHERE FromHost = '%s' ORDER BY VALUE DESC LIMIT 0,20"%(target_column, host));
      values = cursor.fetchall();
      for value in values:
        print("%s.value %s"%(value[0],value[1]))

cursor.close();
mysql.close();
