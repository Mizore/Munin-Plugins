#!/usr/bin/perl -w
# Copyright (C) 2010  Raptor 2101 [raptor2101@gmx.de]
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>. 
#
# Plugin to monitor rdiff-backup target-dirs. Its simply read the statistic file.
# usage: rdiff_backup_statistic_path_to_backup_dir
#
# Origional Author: Christian 'Raptor 2101' KÃ¶lpin
# 
# Parameters:
#
#       config   (required)
#       autoconf (optional - only used by munin-config)
#
# Magic markers (optional - only used by munin-config and some
# installation scripts):
#%# family=auto
#%# capabilities=autoconf
use strict;
use Time::Local;
use Switch;

sub DecodeRdiffStatistic
{
  my($filePath) = @_;
  
  open (my $query_fileContent,$filePath) or die "Could not open Statistic-File, $!";
  while(<$query_fileContent>)
  {
    if($_ =~ /EndTime/)
    {
      my @array = split(' ',$_);
      my $backupTime = $array[1];
      my $daysSinceBackup = (time - $backupTime)/86400;
      
      printf "DaysSinceBackup.value ".$daysSinceBackup."\n";
    }
    
    if($_ =~ /NewFiles/)
    {
      my @array = split(' ',$_);
      printf "NewFiles.value ".$array[1]."\n";
    }
    
    if($_ =~ /DeletedFiles/)
    {
      my @array = split(' ',$_);
      printf "DeletedFiles.value ".$array[1]."\n";
    }
    
    if($_ =~ /ChangedFiles/)
    {
      my @array = split(' ',$_);
      printf "ChangedFiles.value ".$array[1]."\n";
    }

    if($_ =~ /IncrementFiles/)
    {
      my @array = split(' ',$_);
      printf "IncrementFiles.value ".$array[1]."\n";
    }
    if($_ =~ /Errors/)
    {
      my @array = split(' ',$_);
      printf "Errors.value ".$array[1]."\n";
    }
  }
}

sub RdiffStatisticConfig
{
  my($filePath) = @_;
  print "graph_title rdiff-backup ".$filePath." Statistic\n";
  print "graph_scale yes\n";
  print "graph_category backup\n";
  print "graph_args --base 1000\n";
  print "DaysSinceBackup.label Days since last Backup\n";
  print "NewFiles.label added Files\n";
  print "DeletedFiles.label deleted Files\n";
  print "ChangedFiles.label changed Files\n";
  print "IncrementFiles.label incremented Files\n";
  print "Errors.label Errors occured\n";
  print "Errors.critical :0\n";
}

my $progname;
my $path;
$path = $0;

$path =~ s/.*rdiff_backup_statistic//;
$path =~ s/_/\//g;

if(not defined ($ARGV[0]))
{
  $ARGV[0] = ""; 
}

if($ARGV[0] eq "config")
{
  RdiffStatisticConfig($path)
}
elsif ($ARGV[0] eq "autoconf")
{
  print "no\n";
}
else
{
  #printf(STDERR "ls -lt ".$path."/rdiff-backup-data|");
  open (my $query_fileListing,"ls -lt ".$path."/rdiff-backup-data 2>&1 |") or die "Could not open rdiff backup directorie, $!";
  
  while(<$query_fileListing>)
  {
    if($_ =~ /session_statistics\..*\.data/)
    {
      my @array = split(' ',$_);
      
      DecodeRdiffStatistic($path."/rdiff-backup-data/".$array[8]);
      last;
    }
  }
}
